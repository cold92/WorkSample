apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.zlc.work"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 2
        versionName "2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilter 'armeabi'
            abiFilter 'armeabi-v7a'
            abiFilter 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    lintOptions {
        abortOnError false
    }
//    splits {
//        abi {
//            enable true
//            reset()
//            include 'armeabi', 'armeabi-v7a', 'arm64-v8a'
//            universalApk true
//        }
//    }
}

//// 添加插件
//apply plugin: 'com.mob.sdk'
//
//// 在MobSDK的扩展中注册MobLink的相关信息
//MobSDK {
//    appKey "d580ad56b4b5"
//    appSecret "7fcae59a62342e7e2759e9e397c82bdd"
//
//    MobLink {
//        // 若使用经典版，需打开该设置，否则默认为专业版
//        preferClassicalEdition true
//    }
//}

import com.android.build.OutputFile
// 处理versionCode冲突
ext.abiCodes = ['armeabi': 0, 'armeabi-v7a': 1, "arm64-v8a": 2]
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation "com.android.support:recyclerview-v7:27.1.1"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    // butterknife，自动绑定控件
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    //annotationProcessor project(':compiler')

    def GLIDE_VERSION = "4.9.0"
    implementation "com.github.bumptech.glide:glide:${GLIDE_VERSION}"
    annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE_VERSION}"
    implementation "com.zlc.glide:webpdecoder:1.5.4.9.0"

    // Fresco图片库
    implementation 'com.facebook.fresco:fresco:1.12.0'
    implementation 'com.facebook.fresco:animated-gif:1.12.0'
    implementation 'com.facebook.fresco:animated-webp:1.12.0'
    implementation 'com.facebook.fresco:webpsupport:1.12.0'

    //optional, help to generate the final application
    //provided('com.tencent.tinker:tinker-android-anno:1.9.1')
    //tinker's main Android lib
    implementation('com.tencent.tinker:tinker-android-lib:1.9.1')

    // airbnb lottie
    implementation('com.airbnb.android:lottie:2.7.0')

    // Zxing 二维码扫描
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'com.google.zxing:android-core:3.3.0'
    implementation 'com.google.zxing:android-integration:3.3.0'

    // Google ExoPlayer播放器
    implementation ('com.google.android.exoplayer:exoplayer:2.8.4')
    //implementation 'com.google.android.exoplayer:exoplayer-core:2.10.0'
    //implementation 'com.google.android.exoplayer:exoplayer-dash:2.X.X'
    //implementation 'com.google.android.exoplayer:exoplayer-ui:2.X.X'

    // bilibili ijkPlayer播放器
    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'
    // ExoPlayer as IMediaPlayer: optional, experimental
    implementation 'tv.danmaku.ijk.media:ijkplayer-exo:0.8.8'


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

//apply plugin: "QMess"

apply plugin: 'AndResGuard'
andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // It will keep the origin path of your resources when it's true
    keepRoot = false
    // It will make the proguard res name in resources string pool to the same value
    //fixedResName = "iqiyi"
    // It will merge the duplicated resources, but don't rely on this feature too much.
    // it's always better to remove duplicated resource from repo
    mergeDuplicatedRes = true
    whiteList = [
            // your icon
            "R.mipmap.ic_launcher",
            "R.mipmap.ic_launcher_round",
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.16'
        //path = "/usr/local/bin/7za"
    }

    /**
     * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
     * to the path which assemble[Task] write to
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
     * Only works in V1signing, default value is "SHA-1"
     **/
    // digestalg = "SHA-256"
}